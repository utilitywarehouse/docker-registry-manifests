daemon off;

worker_processes 2;

events {
    worker_connections 1024;
}

error_log /dev/stdout warn;

http {
    upstream docker-registry {
        server 127.0.0.1:5000;
    }

    ## Default combined log_format:
    # log_format combined '$remote_addr - $remote_user [$time_local] '
    #                     '"$request" $status $body_bytes_sent '
    #                     '"$http_referer" "$http_user_agent"';

    ## Our log_format
    log_format proxy '$http_x_forwarded_for - $remote_user [$time_local] '
                     '"$request" $status $body_bytes_sent '
                     '"$http_referer" "$http_user_agent" (via $remote_addr)';

    access_log off;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    server_names_hash_bucket_size 64;
    sendfile on;

    # disable any limits to avoid HTTP 413 for large image uploads
    client_max_body_size 0;

    client_body_timeout 3600s;

    # required to avoid HTTP 411: see Issue 1486
    # https://github.com/dotcloud/docker/issues/1486
    chunked_transfer_encoding on;

    ## Set a variable to help us decide if we need to add the
    ## 'Docker-Distribution-Api-Version' header.
    ## The registry always sets this header.
    ## In the case of nginx performing auth, the header will be unset
    ## since nginx is auth-ing before proxying.
    map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
        'registry/2.0' '';
        default registry/2.0;
    }

    server {
        listen 8080 default_server;
        server_name  registry.uw.systems;
        server_name_in_redirect on;
        absolute_redirect off;

        if ($http_x_forwarded_proto = "http") {
            return 301 https://$host$request_uri;
        }

        location / {
            add_header Content-Type text/plain;
            return 200 "Nothing to see here.";
        }

        ## Clients will fallback to v1 registry API if they get a 404 on /v2/
        location /v1/ {
            return 404;
        }

        location /v2/ {
            # Do not allow connections from docker 1.5 and earlier
            # docker < 1.6.0 did not properly set the user agent on ping, catch 'Go *' user agents
            if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*\$" ) {
                return 404;
            }

            # To add basic authentication to v2 use auth_basic setting plus add_header
            auth_basic "Registry realm";
            auth_basic_user_file /etc/nginx.docker-registry-auth/htpasswd;

            ## If $docker_distribution_api_version is empty, the header will not be added.
            ## See the map directive above where this variable is defined.
            add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;

            ## Need to add this header always, because otherwise
            ## Docker sees the 401 and decides to fall back to v1 auth

            proxy_pass                          http://docker-registry;
            proxy_set_header  Host              $http_host;   # required for docker client's sake

            ## AWS ELB sets these headers automatically.
            ## Uncomment if not behind AWS ELB.
            # proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
            # proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;

            ## Since ELB terminates TLS, we have to fudge here,
            ## otherwise the Docker registry will point at http urls.
            proxy_set_header  X-Forwarded-Proto https;
            proxy_read_timeout                  3600s;
        }
    }
}
